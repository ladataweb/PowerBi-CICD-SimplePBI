expression AccessToken = ```
		() => 
		let
			// URL for login with only user: https://login.windows.net/common/oauth2/token/
			body_user = "resource=https://analysis.windows.net/powerbi/api&client_id="&Credentials()[ClientId]&"&grant_type=password&username="&Credentials()[Username]&"&password="&Credentials()[Password]&"&scope=openid",
			body_sp = "grant_type=client_credentials&client_id="&Credentials()[ClientId]&"&client_secret="&Credentials()[SecretKey]&"&resource=https://analysis.windows.net/powerbi/api",
			body = if Credentials()[UseServicePrincipal] = true then body_sp else body_user,
			Data = Web.Contents("https://login.microsoftonline.com/",
			[
				RelativePath=Credentials()[TenantId]&"/oauth2/token",
				Headers = [#"Content-Type"="application/x-www-form-urlencoded"],
				Content=Text.ToBinary(body)
			]),
			DataRecord = Json.Document(Data),
			Return=DataRecord[access_token]
		in
			Return
		```
	lineageTag: e06a6435-e2b8-448a-95d6-705a2354d213
	queryGroup: functions

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression getDataSources = ```
		let
		    Source = (datasetId as text) => let
		    Query1 = Json.Document(Web.Contents("https://api.powerbi.com", 
		    [
		        RelativePath="v1.0/myorg/admin/datasets/"& datasetId&"/datasources",
		        Headers=[
		            Authorization=Text.Combine({"Bearer ", AccessToken()}, "")
		        ]
		    ]))
		    in
		        Query1[value]
		in
		    Source
		```
	lineageTag: 1655aa59-2e59-432c-a8fb-b7dbb4fcbc9d
	queryGroup: functions

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression DataSources = ```
		let
		    Query1 = Json.Document(Web.Contents("https://api.powerbi.com/", 
		    [
		        RelativePath="v1.0/myorg/admin/datasets",
		        Headers=[
		            Authorization=Text.Combine({"Bearer ", AccessToken()}, "")
		        ]
		    ])),
		    value = Query1[value],
		    #"Converted to Table" = Table.FromList(value, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"id"}, {"id"}),
		    #"Added Custom" = Table.AddColumn(#"Expanded Column1", "Sources", each try getDataSources([id]) otherwise null ),
		    #"Expanded Sources" = Table.ExpandListColumn(#"Added Custom", "Sources"),
		    #"Expanded Sources1" = Table.ExpandRecordColumn(#"Expanded Sources", "Sources", {"datasourceType", "connectionDetails", "datasourceId", "gatewayId"}, {"datasourceType", "connectionDetails", "datasourceId", "gatewayId"}),
		    #"Expanded connectionDetails" = Table.ExpandRecordColumn(#"Expanded Sources1", "connectionDetails", {"path"}, {"path"})
		in
		    #"Expanded connectionDetails"
		```
	lineageTag: cd28ec24-6652-4f2a-b0fb-b8dce96122f9

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Exception

expression Apps_Users = ```
		let
		    Query1 = Json.Document(Web.Contents("https://api.powerbi.com/", 
		    [
		        RelativePath="v1.0/myorg/admin/apps",
		        Query = [
		            #"$top"= "999"
		        ],
		        Headers=[
		            Authorization=Text.Combine({"Bearer ", AccessToken()}, "")
		        ]
		    ])),
		    value = Query1[value],
		    #"Converted to Table" = Table.FromList(value, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"id", "name", "lastUpdate", "description", "publishedBy", "workspaceId", "users"}, {"id", "name", "lastUpdate", "description", "publishedBy", "workspaceId", "users"}),
		    #"Removed Columns" = Table.RemoveColumns(#"Expanded Column1",{"name", "lastUpdate", "description", "publishedBy", "workspaceId"}),
		    #"Added Custom" = Table.AddColumn(#"Removed Columns", "Custom", each Json.Document(Web.Contents("https://api.powerbi.com", 
		    [
		        RelativePath="v1.0/myorg/admin/apps/"&[id]&"/users",
		        Query = [
		            #"$top"= "999"
		        ],
		        Headers=[
		            Authorization=Text.Combine({"Bearer ", AccessToken()}, "")
		        ]
		    ]))[value] ),
		    #"Expanded Custom" = Table.ExpandListColumn(#"Added Custom", "Custom"),
		    #"Expanded Custom1" = Table.ExpandRecordColumn(#"Expanded Custom", "Custom", {"AppUserAccessRight", "emailAddress", "displayName", "identifier", "graphId", "principalType", "userType"}, {"AppUserAccessRight", "emailAddress", "displayName", "identifier", "graphId", "principalType", "userType"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Custom1",{{"id", type text}, {"AppUserAccessRight", type text}, {"emailAddress", type text}, {"displayName", type text}, {"identifier", type text}, {"graphId", type text}, {"principalType", type text}, {"userType", type text}})
		in
		    #"Changed Type"
		```
	lineageTag: 1969308c-5348-4e12-97c4-da88756bab49

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Exception

expression Logo = "https://www.ladataweb.com.ar/images/LD-trans.png" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=false]
	lineageTag: f9efd1a9-7455-4411-bf0e-39fce6e32c15
	queryGroup: Parameters

	annotation PBI_ResultType = Exception

expression CredentialsExcel = "https://ladataweb-my.sharepoint.com/personal/ibarrau_ladataweb_com_ar/Documents/DB%20for%20simplepbix/Simplepbix%20Credentials.xlsx" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 827bd42a-b849-4209-9979-ce5c613349e8
	queryGroup: Parameters

	annotation PBI_ResultType = Text

expression SimplePBIX_Key = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 5e4b1b67-493d-4e2d-a446-076ab36fc1fa
	queryGroup: Parameters

	annotation PBI_ResultType = Text

expression get_key = ```
		let
		    Source = (Param as text) => let
		        Source = Web.Contents("https://ldw-api.azurewebsites.net/",
		        [ 
		            RelativePath="api/validatekey",
		            ManualStatusHandling={403, 401, 404, 400, 500}, 
		            Query= [
		            period=Param,
		            key=SimplePBIX_Key
		        ]
		        ]),
		        GetMetadata = Value.Metadata(Source),
		        GetResponseStatus = GetMetadata[Response.Status], 
		        JsonDoc = if GetResponseStatus=null or GetResponseStatus=403 then [Period=Param, State="Forbidden", Key=SimplePBIX_Key, Message="Access forbidden"] else Json.Document(Source)
		    in
		        JsonDoc
		in
		    Source
		```
	lineageTag: eb19619c-8d7e-4915-a23d-55fca202e296
	queryGroup: ApiKeyCheck

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression is_valid = ```
		let
		    Source = () => let
		    Source = Web.Contents("https://ldw-api.azurewebsites.net/",
		    [ 
		        RelativePath="api/validatekey",
		        ManualStatusHandling={400, 404, 403, 500}, 
		        Query= [
		        period=Date.ToText(DateTime.Date(DateTime.LocalNow()), "yyyy-MM"),
		        key=SimplePBIX_Key
		    ]
		    ]),
		    GetMetadata = Value.Metadata(Source),
		    GetResponseStatus = GetMetadata[Response.Status], 
		    Output = if GetResponseStatus=null or GetResponseStatus=403 then "Forbidden" else Json.Document(Source)[State]
		in
		    Output
		in
		    Source
		```
	lineageTag: 570470a2-4e7c-46bc-85d0-fc6c275f38a6
	queryGroup: ApiKeyCheck

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression RangeStart = #datetime(2023, 1, 1, 0, 0, 0) meta [IsParameterQuery=true, Type="DateTime", IsParameterQueryRequired=true]
	lineageTag: 3334a167-ac03-4b3a-92a1-a35d8c845cf6
	queryGroup: ApiKeyCheck

	annotation PBI_ResultType = DateTime

	annotation PBI_NavigationStepName = Navigation

expression RangeEnd = #datetime(2023, 3, 30, 0, 0, 0) meta [IsParameterQuery=true, Type="DateTime", IsParameterQueryRequired=true]
	lineageTag: 1c35346d-8cf7-4a2a-aa95-c57e236a187f
	queryGroup: ApiKeyCheck

	annotation PBI_ResultType = DateTime

	annotation PBI_NavigationStepName = Navigation

expression StartDate =
		let
		    Source = DateTime.Date(RangeStart)
		in
		    Source
	lineageTag: 265898b6-67a1-48f9-b892-04c046262c22
	queryGroup: ApiKeyCheck

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Date

expression EndDate =
		let
		    Source = DateTime.Date(RangeEnd)
		in
		    Source
	lineageTag: 8b08f0a3-764a-42c5-9bca-14a951d9b2aa
	queryGroup: ApiKeyCheck

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Date

expression Credentials =
		()=>
		let
		    Source = Excel.Workbook(Web.Contents(CredentialsExcel), true, true)[Data]{0},
		    ConvertToList = Table.ToRecords(Source),
		    GetRecordFromList = ConvertToList{0}
		in
		    GetRecordFromList
	lineageTag: b119254b-ad01-411b-b2af-438717a8a178
	queryGroup: functions

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

