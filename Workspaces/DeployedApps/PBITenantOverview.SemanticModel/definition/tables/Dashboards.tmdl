table Dashboards
	lineageTag: 2427f96f-e069-4e9c-8b64-d9c37790385f

	measure 'Dashboards Names' =
			
			CONCATENATEX(Dashboards, "- "&Dashboards[displayName], UNICHAR(10) )
		lineageTag: 8cb8eb9e-3a72-4fc5-8dbe-6b6dba4751a9

	column workspaceId
		dataType: string
		lineageTag: 4d347b71-64f8-49d8-9705-6e57e5883ad7
		summarizeBy: none
		sourceColumn: workspaceId

		annotation SummarizationSetBy = Automatic

	column id
		dataType: string
		lineageTag: c939f4a0-7073-4d95-9cfa-7028c5b4a4d1
		summarizeBy: none
		sourceColumn: id

		annotation SummarizationSetBy = Automatic

	column displayName
		dataType: string
		lineageTag: e6823f34-bcb8-453b-8010-5335686711e4
		summarizeBy: none
		sourceColumn: displayName

		annotation SummarizationSetBy = Automatic

	column isReadOnly
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 51dea473-ea65-4f27-8729-2ca9f8626a89
		summarizeBy: none
		sourceColumn: isReadOnly

		annotation SummarizationSetBy = Automatic

	column users
		dataType: string
		lineageTag: 3e59aa5f-048e-401c-9560-f92a4932d7b4
		summarizeBy: none
		sourceColumn: users

		annotation SummarizationSetBy = Automatic

	column subscriptions
		dataType: string
		lineageTag: d61152ce-3fe0-44db-b32b-e323437f53c5
		summarizeBy: none
		sourceColumn: subscriptions

		annotation SummarizationSetBy = Automatic

	column appId
		dataType: string
		lineageTag: 0fb9e1de-fc72-434c-9d72-0c7e681d3846
		summarizeBy: none
		sourceColumn: appId

		annotation SummarizationSetBy = Automatic

	column URL
		dataType: string
		lineageTag: 79864eeb-31d8-4141-88e8-c2c617d293d2
		dataCategory: WebUrl
		summarizeBy: none
		sourceColumn: URL

		annotation SummarizationSetBy = Automatic

	column isItAppDashboard
		dataType: string
		lineageTag: 72de8cec-d6db-4ef2-af5f-71d044d3e2c1
		summarizeBy: none
		sourceColumn: isItAppDashboard

		annotation SummarizationSetBy = Automatic

	partition Dashboards-3990d037-8fba-474a-a020-a38b9a05f217 = m
		mode: import
		queryGroup: PBIContent
		source = ```
				let
				    Dashboards = if is_valid() = "Forbidden" then #table({"workspaceId","id","displayName","isReadOnly","users","subscriptions","appId","URL","isItAppDashboard"}, {})
				else
				    let
				        Query1 = Json.Document(Web.Contents("https://api.powerbi.com", 
				        [
				            RelativePath="v1.0/myorg/admin/groups",
				            Query = [
				                #"$top"= "999",
				                #"$expand"="dashboards"
				            ],
				            Headers=[
				                Authorization=Text.Combine({"Bearer ", AccessToken()}, "")
				            ]
				        ])),
				        value = Query1[value],
				        #"Converted to Table" = Table.FromList(value, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
				        #"Expanded Column1" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"id", "dashboards"}, {"workspaceId", "dashboards"}),
				        #"Expanded dashboards" = Table.ExpandListColumn(#"Expanded Column1", "dashboards"),
				        #"Expanded dashboards1" = try Table.ExpandRecordColumn(#"Expanded dashboards", "dashboards", {"id", "displayName", "isReadOnly", "users", "subscriptions", "appId"}, {"id", "displayName", "isReadOnly", "users", "subscriptions", "appId"}) otherwise #table({"id", "displayName", "isReadOnly", "users", "subscriptions", "appId"},{}),
				        #"Filtered Rows" = Table.SelectRows(#"Expanded dashboards1", each ([id] <> null)),
				        #"Added Custom" = Table.AddColumn(#"Filtered Rows", "URL", each "https://app.powerbi.com/groups/"&[workspaceId]&"/dashboards/"&[id]),
				        #"Changed Type" = Table.TransformColumnTypes(#"Added Custom",{{"id", type text}, {"displayName", type text}, {"isReadOnly", type logical}, {"appId", type text}, {"workspaceId", type text}, {"URL", type text}}),
				        #"Added Custom1" = Table.AddColumn(#"Changed Type", "isItAppDashboard", each if Text.Contains([displayName], "[App]") then "App Dashboard" else "No App Dashboard")
				    in
				        #"Added Custom1"
				in
				    Dashboards
				```

	annotation PBI_ResultType = Exception

	annotation PBI_NavigationStepName = Navigation

